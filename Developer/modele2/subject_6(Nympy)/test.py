import numpy as np
#1
'''
Создать 5x5 матрицу со значениями в строках от 0 до 4
Z = np.zeros((5,5))
Z += np.arange(5)
print(Z)
'''
#2
'''
Создать 8x8 матрицу и заполнить её в шахматном порядке
Z = np.zeros((8,8), dtype=int)
Z[1::2,::2] = 1
Z[::2,1::2] = 1
print(Z)
'''
#3
'''
Создать вектор размера 10, заполненный нулями, но пятый элемент равен 1

Z = np.zeros(10)
Z[4] = 1
print(Z)
'''

#4
'''
Создать массив 10x10 со случайными значениями, найти минимум и максимум

Z = np.random.random((10,10))
Zmin, Zmax = Z.min(), Z.max()
print(Zmin, Zmax)
'''

#5
'''
Перемножить матрицы 5x3 и 3x2

Z = np.dot(np.ones((5,3)), np.ones((3,2)))
print(Z)
'''

#6
'''
Создать матрицу (двумерный массив) 3x3 со значениями от 0 до 8

Z = np.arange(9).reshape(3,3)
print(Z)
'''
#7
'''
Дан массив, поменять знак у элементов, значения которых между 3 и 8

Z = np.arange(11)
Z[(3 < Z) & (Z <= 8)] *= -1
print(Z)
'''

#8
'''
Создать вектор размера 10 со значениями от 0 до 1, не включая ни то, ни другое

Z = np.linspace(0,1,12)[1:-1]
print(Z)
'''
#9
'''
Создать вектор со значениями от 10 до 49

Z = np.arange(10,50)
print(Z)
'''

#10
'''
Поменять 2 строки в матрице

A = np.arange(25).reshape(5,5)
A[[0,1]] = A[[1,0]]
print(A)
'''

#practice2
#1
#Найдите индексы ненулевых элементов из вектора [1,2,0,0,4,0]
'''
a = np.array([1,2,0,0,4,0])
print('Исходный вектор a: \n', a)
index = np.nonzero(a)
print('Индексы ненулевых значений: \n', *(index))
'''
#2
#Создайте случайный массив целых чисел 2 x 4 от 0 до 30 включительно и найдите среднее значение всех элементов:
'''
a = np.random.randint(30, size=((2,4)))
print('Матрица\n',a)
print('Cреднее значение всех элементов', a.mean())
'''

#3
#Создать матрицу с 0 внутри, и 1 на границах
'''
a = np.ones((10,10))
a[1:-1,1:-1] = 0
print(a)

'''

#4
#Создать двумерный список и преобразовать его в NumPy массив (с типом int32)
'''
list_arr = [[i for i in range(10)] for j in range(10)]
np_arr = np.array(list_arr, dtype='int32')
print(np_arr)
'''

#5
#Дан вектор [1, 2, 3, 4, 5], построить новый вектор с тремя нулями между каждым значением
'''
A = np.array([1,2,3,4,5])
number = 3
A1 = np.zeros(len(A) + (len(A)-1)*(number))
A1[::number+1] = A
print(A1)
'''

#6
#Даны 2 массива A (8x3) и B (2x2). Найти строки в A, которые содержат элементы из каждой строки в B, независимо от порядка элементов в B
'''
A = np.random.randint(0,5,(8,3))
B = np.random.randint(0,5,(2,2))
print('Массив A\n', A)
print('Массив B\n',B)

C = (A[..., np.newaxis, np.newaxis] == B)
rows = (C.sum(axis=(1,2,3)) >= B.shape[1]).nonzero()[0]
print('Строки из A, в которых содержатся элементы из каждой строки B\n',*(rows))

'''

#7
#Напишите программу, чтобы посчитать количество «t» в данном массиве поэлементно.
'''
a = np.array(['Python', 'PHP', 'JS', 'examples', 'html'], dtype=str)
print('Массив\n', *a)
b = np.char.count(a, "t")
print('Количество "t" в каждом элементе\n', b)
'''

#8
#Напишите программу NumPy, чтобы проверить, состоит ли каждый элемент данного массива только из цифр, только из строчных и только из прописных букв.\
'''
a = np.array(['Python', 'PHP', 'JS', 'Examples', 'html5', '5'], dtype=str)
print('Массив\n', *a)
a1 = np.char.isdigit(a)
a2 = np.char.islower(a)
a3 = np.char.isupper(a)
print("Только цифры =", a1)
print("Только строчные буквы =", a2)
print("Только в верхнем регистре =", a3)
'''

#9
#Напишите программу, чтобы сделать все элементы данной строки числовой строкой из 5 цифр с нулями слева.
'''
a = np.array(['2', '11', '234', '1234', '12345'], dtype=str)
print('Массив:\n', a)
b = np.char.zfill(a, 5)
print('Числовая строка из 5 цифр с нулями:\n', b)
'''

#10
#Построить прямое произведение массивов (все комбинации с каждым элементом)
'''
def cartesian(arrays):
    arrays = [np.asarray(a) for a in arrays] #Преобразовать список в массив
    shape = map(len, arrays)

    i = np.indices(shape, dtype=int) #Возвращает массив, представляющий индексы сетки.
    i = i.reshape(len(arrays), -1).T #a.T возвращает транспонированный массив.

    for n, arr in enumerate(arrays):
        i[:, n] = arrays[n][i[:, n]]

    return i

print(cartesian(([1, 2, 3], [4, 5], [6, 7])))
'''





